#! /usr/bin/env python

import httplib
import json
import subprocess
import logging
import sys
import os
from datadog import initialize, statsd

CRIT_CPU_TEMP = 74
CRIT_GPU_TEMP = 85

initialize({ 'api_key': os.getenv('DATADOG_API_KEY') })

logger = logging.getLogger("arbiter")
logger.setLevel(logging.INFO)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)

conn = httplib.HTTPConnection("localhost")
conn.request("GET", "/temperatures.php")
resp = conn.getresponse()

temps = json.loads(resp.read())
cpu_cores = temps["cpu"]["cores"]
gpus = temps["gpu"]

def stop_mining():
    subprocess.call(["killall", "xmr-stak"])

    sys.exit(0)

for core, temp in cpu_cores.items():
    statsd.gauge("temps.cpu.{0}".format(core), float(temp))

    if float(core) >= CRIT_CPU_TEMP:
        logger.info("CPU Core %s violates max temp at %sC >= %sC, shutting down mining!",
				core, temp, CRIT_CPU_TEMP)
        stop_mining()

for gpu, temp in gpus.items():
    statsd.gauge("temps.gpu.{0}".format(gpu), int(temp))
    if float(gpu) >= CRIT_GPU_TEMP:
        logger.info("GPU %s violates max temp at %sC >= %sC, shutting down mining!",
				gpu, temp, CRIT_GPU_TEMP)
        stop_mining()

sys.exit(0)
